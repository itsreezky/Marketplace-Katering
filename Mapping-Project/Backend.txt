Tentu! Mari kita tambahkan tabel `customers` dan sesuaikan dengan deskripsi aplikasi yang diberikan.

### 1. Setup Proyek Laravel

```sh
git clone https://github.com/itsreezky/Marketplace-Katering.git
cd Marketplace-Katering
```

### 2. Buat Database dan Konfigurasi

Buat database baru untuk proyek ini dan atur konfigurasi database di file `.env` Anda.

```env
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=katering_db
DB_USERNAME=root
DB_PASSWORD=
```

### 3. Buat Model dan Migrasi

Kita akan membuat model dan migrasi untuk `User`, `Merchant`, `Customer`, `Menu`, `Order`, dan `Invoice`.

#### a. Model User

Jalankan perintah berikut:

```sh
php artisan make:model User -m
```

Edit migrasi di `database/migrations/xxxx_xx_xx_create_users_table.php`:

```php
Schema::create('users', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->string('email')->unique();
    $table->string('password');
    $table->enum('role', ['merchant', 'customer']);
    $table->timestamps();
});
```

#### b. Model Merchant

```sh
php artisan make:model Merchant -m
```

Edit migrasi di `database/migrations/xxxx_xx_xx_create_merchants_table.php`:

```php
Schema::create('merchants', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('user_id');
    $table->string('company_name');
    $table->text('address');
    $table->string('contact');
    $table->text('description')->nullable();
    $table->timestamps();

    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
});
```

#### c. Model Customer

```sh
php artisan make:model Customer -m
```

Edit migrasi di `database/migrations/xxxx_xx_xx_create_customers_table.php`:

```php
Schema::create('customers', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('user_id');
    $table->string('company_name');
    $table->text('address');
    $table->string('contact');
    $table->timestamps();

    $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
});
```

#### d. Model Menu

```sh
php artisan make:model Menu -m
```

Edit migrasi di `database/migrations/xxxx_xx_xx_create_menus_table.php`:

```php
Schema::create('menus', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('merchant_id');
    $table->string('name');
    $table->text('description');
    $table->string('photo');
    $table->decimal('price', 8, 2);
    $table->timestamps();

    $table->foreign('merchant_id')->references('id')->on('merchants')->onDelete('cascade');
});
```

#### e. Model Order

```sh
php artisan make:model Order -m
```

Edit migrasi di `database/migrations/xxxx_xx_xx_create_orders_table.php`:

```php
Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('customer_id');
    $table->unsignedBigInteger('menu_id');
    $table->integer('quantity');
    $table->date('delivery_date');
    $table->timestamps();

    $table->foreign('customer_id')->references('id')->on('customers')->onDelete('cascade');
    $table->foreign('menu_id')->references('id')->on('menus')->onDelete('cascade');
});
```

#### f. Model Invoice

```sh
php artisan make:model Invoice -m
```

Edit migrasi di `database/migrations/xxxx_xx_xx_create_invoices_table.php`:

```php
Schema::create('invoices', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('order_id');
    $table->decimal('total_price', 8, 2);
    $table->timestamps();

    $table->foreign('order_id')->references('id')->on('orders')->onDelete('cascade');
});
```

Jalankan migrasi untuk membuat tabel di database:

```sh
php artisan migrate
```

### SETUP MODEL
Tentu, berikut adalah detail model untuk setiap entitas dalam aplikasi katering.

#### 1. Model User

Edit `app/Models/User.php`:

```php
namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable;

    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function merchant()
    {
        return $this->hasOne(Merchant::class);
    }

    public function customer()
    {
        return $this->hasOne(Customer::class);
    }

    public function orders()
    {
        return $this->hasMany(Order::class, 'customer_id');
    }
}
```

#### 2. Model Merchant

Edit `app/Models/Merchant.php`:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Merchant extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'company_name',
        'address',
        'contact',
        'description',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function menus()
    {
        return $this->hasMany(Menu::class);
    }
}
```

#### 3. Model Customer

Edit `app/Models/Customer.php`:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Customer extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'company_name',
        'address',
        'contact',
    ];

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }
}
```

#### 4. Model Menu

Edit `app/Models/Menu.php`:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Menu extends Model
{
    use HasFactory;

    protected $fillable = [
        'merchant_id',
        'name',
        'description',
        'photo',
        'price',
    ];

    public function merchant()
    {
        return $this->belongsTo(Merchant::class);
    }

    public function orders()
    {
        return $this->hasMany(Order::class);
    }
}
```

#### 5. Model Order

Edit `app/Models/Order.php`:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Order extends Model
{
    use HasFactory;

    protected $fillable = [
        'customer_id',
        'menu_id',
        'quantity',
        'delivery_date',
    ];

    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    public function menu()
    {
        return $this->belongsTo(Menu::class);
    }

    public function invoice()
    {
        return $this->hasOne(Invoice::class);
    }
}
```

#### 6. Model Invoice

Edit `app/Models/Invoice.php`:

```php
namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Invoice extends Model
{
    use HasFactory;

    protected $fillable = [
        'order_id',
        'total_price',
    ];

    public function order()
    {
        return $this->belongsTo(Order::class);
    }
}
```

### 7. Tambahkan Middleware untuk Otentikasi

Pastikan Anda telah mengatur otentikasi menggunakan Laravel Sanctum. Install Laravel Sanctum:

```sh
composer require laravel/sanctum
```

Publikasikan konfigurasi Sanctum:

```sh
php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
```

Jalankan migrasi:

```sh
php artisan migrate
```

### 8. Buat Controller

#### a. AuthController

```sh
php artisan make:controller AuthController
```

Edit `app/Http/Controllers/AuthController.php`:

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    public function register(Request $request)
    {
        $validatedData = $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8',
            'role' => 'required|string|in:

merchant,customer',
        ]);

        $user = User::create([
            'name' => $validatedData['name'],
            'email' => $validatedData['email'],
            'password' => Hash::make($validatedData['password']),
            'role' => $validatedData['role'],
        ]);

        return response()->json(['message' => 'User registered successfully', 'user' => $user], 201);
    }

    public function login(Request $request)
    {
        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials)) {
            $user = Auth::user();
            return response()->json(['message' => 'Login successful', 'user' => $user], 200);
        }

        return response()->json(['message' => 'Invalid credentials'], 401);
    }
}
```

#### b. MerchantController

```sh
php artisan make:controller MerchantController
```

Edit `app/Http/Controllers/MerchantController.php`:

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Merchant;
use App\Models\Menu;
use App\Models\Order;
use Illuminate\Support\Facades\Auth;

class MerchantController extends Controller
{
    public function updateProfile(Request $request)
    {
        $merchant = Merchant::where('user_id', Auth::id())->firstOrFail();
        $merchant->update($request->all());

        return response()->json(['message' => 'Profile updated successfully', 'merchant' => $merchant], 200);
    }

    public function addMenu(Request $request)
    {
        $merchant = Merchant::where('user_id', Auth::id())->firstOrFail();

        $menu = $merchant->menus()->create($request->all());

        return response()->json(['message' => 'Menu added successfully', 'menu' => $menu], 201);
    }

    public function updateMenu(Request $request, $id)
    {
        $menu = Menu::findOrFail($id);
        $menu->update($request->all());

        return response()->json(['message' => 'Menu updated successfully', 'menu' => $menu], 200);
    }

    public function deleteMenu($id)
    {
        $menu = Menu::findOrFail($id);
        $menu->delete();

        return response()->json(['message' => 'Menu deleted successfully'], 200);
    }

    public function listOrders()
    {
        $merchant = Merchant::where('user_id', Auth::id())->firstOrFail();
        $orders = Order::whereHas('menu', function($query) use ($merchant) {
            $query->where('merchant_id', $merchant->id);
        })->get();

        return response()->json(['orders' => $orders], 200);
    }
}
```

#### c. CustomerController

```sh
php artisan make:controller CustomerController
```

Edit `app/Http/Controllers/CustomerController.php`:

```php
namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Menu;
use App\Models\Order;
use App\Models\Invoice;
use Illuminate\Support\Facades\Auth;

class CustomerController extends Controller
{
    public function searchCatering(Request $request)
    {
        $query = Menu::query();

        if ($request->has('location')) {
            $query->whereHas('merchant', function($q) use ($request) {
                $q->where('address', 'like', '%' . $request->location . '%');
            });
        }

        if ($request->has('food_type')) {
            $query->where('description', 'like', '%' . $request->food_type . '%');
        }

        $menus = $query->get();

        return response()->json(['menus' => $menus], 200);
    }

    public function placeOrder(Request $request)
    {
        $order = Order::create([
            'customer_id' => Auth::id(),
            'menu_id' => $request->menu_id,
            'quantity' => $request->quantity,
            'delivery_date' => $request->delivery_date,
        ]);

        $menu = Menu::findOrFail($request->menu_id);
        $total_price = $menu->price * $request->quantity;

        $invoice = Invoice::create([
            'order_id' => $order->id,
            'total_price' => $total_price,
        ]);

        return response()->json(['message' => 'Order placed successfully', 'order' => $order, 'invoice' => $invoice], 201);
    }

    public function viewInvoice($id)
    {
        $invoice = Invoice::where('order_id', $id)->firstOrFail();

        return response()->json(['invoice' => $invoice], 200);
    }
}
```

### 9. Tambahkan Rute API

Edit `routes/api.php`:

```php
use App\Http\Controllers\AuthController;
use App\Http\Controllers\MerchantController;
use App\Http\Controllers\CustomerController;

Route::post('register', [AuthController::class, 'register']);
Route::post('login', [AuthController::class, 'login']);

Route::middleware('auth:sanctum')->group(function () {
    Route::prefix('merchant')->group(function () {
        Route::put('profile', [MerchantController::class, 'updateProfile']);
        Route::post('menu', [MerchantController::class, 'addMenu']);
        Route::put('menu/{id}', [MerchantController::class, 'updateMenu']);
        Route::delete('menu/{id}', [MerchantController::class, 'deleteMenu']);
        Route::get('orders', [MerchantController::class, 'listOrders']);
    });

    Route::prefix('customer')->group(function () {
        Route::get('search-catering', [CustomerController::class, 'searchCatering']);
        Route::post('order', [CustomerController::class, 'placeOrder']);
        Route::get('invoice/{id}', [CustomerController::class, 'viewInvoice']);
    });
});
```

### 10. Uji Backend API

Jalankan server:

```sh
php artisan serve
```
